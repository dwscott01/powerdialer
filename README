# Agent Insights LWC ‚Äì Developer Guide

‚úÖ Complete step-by-step implementation guide for building the `agentInsightsCard` Lightning Web Component. 

---

## üéØ Project Goal

To build a responsive Lightning Web Component (LWC) that displays real-time agent insights during a live call in Salesforce PowerDialer. 
The component surfaces key performance metrics, listing behavior, market activity, and engagement insights from both Bridge MLS API and Salesforce native data.

---

## üì¶ Component Name

**agentInsightsCard**

---

## üñº Output Layout (Two-Column Design)

üîπ Profile & Market Presence
Office: Houston Heights        Brokerage Rank: #3 of 12 in ZIP
Top ZIPs: 77008, 77009         Licensed Since: 2014
Agent Rank: #2 of 14

üîπ Sales Performance
YTD Volume: $6.2M              Closed Deals: 12
Avg Deal Size: $520K           Last Close: Mar 12, 2025
List-to-Close: 42 days

üîπ Market Context (77008)
Comps Closed (90d): 5          Avg Closed Price: $470K
Active Listings: 11            Avg DOM: 31 days

üîπ Listing Risk Signals
Expiring Soon: 2               Stale Listings: 1
Lost Listings: 3               Engagement Rate: 78% opened

Suggested Opener: 
‚ÄúCongrats on your March closing in 77008! I‚Äôve got a buyer actively looking in that ZIP. Want to chat?‚Äù


### Profile & Market Presence
- üè¢ Office: Houston Heights Branch
- üìç Top ZIPs: 77008, 77009
- üìÜ Licensed Since: 2014
- üèÜ Agent Rank: #2 of 14
- üè¢ Brokerage Rank: #3 of 12 in ZIP

### Sales Performance
- üí∞ YTD Volume: $6.2M
- üìà Closed Deals: 12
- üì¶ Avg Deal Size: $520K
- üìÖ Last Close: Mar 12, 2025
- ‚è± List-to-Close: 42 days

### Market Context
- üè† Comps Closed (90d): 5
- üíµ Avg Closed Price: $470K
- üìå Active Listings: 11
- üìâ Avg DOM: 31 days

### Listing Risk Signals
- üìÜ Expiring Soon: 2 listings
- üï∞ Stale Listings: 1
- ‚ùå Lost Listings: 3
- üì® Engagement Rate: 78% opened

---

## üîó Required Data Sources

- **Bridge API** ‚Äì For live listing + agent activity
- **Salesforce CRM** ‚Äì For emails, engagement, past deals

---

---

## üß† Salesforce Logic & Bridge Field Mapping

Detailed mapping of each metric shown in the Agent Insights Card.

---

### üìä SALES PERFORMANCE

**YTD Volume**
- Bridge Field: `ClosePrice`
- Logic: Sum all `ClosePrice` where `CloseDate` is in current year

**Closed Deals**
- Count of listings with `Status = Closed` and `CloseDate` in current year

**Avg Deal Size**
- `YTD Volume √∑ Closed Deals`

**Last Close**
- Most recent `CloseDate`

**List-to-Close**
- Average of `(CloseDate - ListDate)` for all closed listings

---

### üß≠ MARKET CONTEXT

**Comps Closed (90d)**: Status = Closed AND `CloseDate >= Today() - 90`  
**Avg Closed Price**: Average `ClosePrice` of above  
**Active Listings**: Status = Active  
**Avg DOM**: Average `DOM` of Closed listings

---

### ‚ö†Ô∏è LISTING RISK SIGNALS

**Expiring Soon**: `ExpirationDate <= TODAY + 30`  
**Stale Listings**: `DOM > 60` AND Status = Active  
**Lost Listings**: Status = Expired or Withdrawn

---

### üì© EMAIL/SMS ENGAGEMENT

Engagement Rate = `(EmailOpened__c / EmailSent__c) * 100`

(Sourced from `Agent_Engagement__c` or passed via API integration)

---

## ‚öôÔ∏è Custom Objects & Fields (Optional)

### `Property__c`
- `ListDate__c` (Date)
- `CloseDate__c` (Date)
- `ClosePrice__c` (Currency)
- `ExpirationDate__c` (Date)
- `Status__c` (Picklist)

### `Agent_Engagement__c`
- `EmailSent__c` (Number)
- `EmailOpened__c` (Number)
- `SMSReplied__c` (Number)

---


# Agent Insights LWC ‚Äì Developer Guide

‚úÖ Complete step-by-step implementation guide for building the `agentInsightsCard` Lightning Web Component.

## Included Steps
- Step 1: Scaffold LWC Layout
- Step 2: Insert Mock Data
- Step 3: Wire Apex Data
- Step 4: Make Stats Clickable
- Step 5: Calculate Engagement Rate
- Step 6: Style & Final QA
- Step 7: Testing & Deployment

---

## ‚úÖ Step 1: Scaffold LWC Layout  
‚è± Estimated Time: ~1 hour

### 1.1 Create LWC Component Files
```bash
sfdx force:lightning:component:create --type lwc --componentname agentInsightsCard --outputdir force-app/main/default/lwc
```
Creates:
- `agentInsightsCard.html`
- `agentInsightsCard.js`
- `agentInsightsCard.js-meta.xml`

### 1.2 Set Access Metadata
```xml
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
  <apiVersion>58.0</apiVersion>
  <isExposed>true</isExposed>
  <targets>
    <target>lightning__AppPage</target>
    <target>lightning__RecordPage</target>
    <target>lightning__HomePage</target>
  </targets>
</LightningComponentBundle>
```

### 1.3 Add Base Layout (HTML)
```html
<template>
  <div class="agent-card">
    <section>
      <h3>Profile & Market Presence</h3>
      <div class="row">Office: ‚Ä¶</div>
    </section>
    <!-- More sections -->
  </div>
</template>
```

### 1.4 Create JS Controller
```js
import { LightningElement, track } from 'lwc';
export default class AgentInsightsCard extends LightningElement {
  @track insights = {};
}
```

### 1.5 Optional CSS
```css
.agent-card {
  padding: 1rem;
}
.row {
  display: flex;
  justify-content: space-between;
}
```

### 1.6 Push to Org
```bash
sfdx force:source:push
sfdx force:org:open
```

### 1.7 Add to App Page
- Setup ‚Üí App Builder
- Drag `agentInsightsCard` to layout
- Save & Activate

---

## ‚úÖ Step 2: Insert Mock Data  
‚è± Estimated Time: 1‚Äì1.5 hours

### 2.1 Add Mock Object in JS
```js
@track insights = {
  profile: {
    office: 'Houston Heights Branch',
    licenseYear: 2014,
    topZips: ['77008', '77009'],
    agentRank: '#2 of 14',
    brokerageRank: '#3 of 12 in ZIP'
  },
  sales: {
    volume: 6200000,
    closedDeals: 12,
    avgDealSize: 520000,
    lastClose: 'Mar 12, 2025',
    listToCloseDays: 42
  },
  market: {
    compsClosed: 5,
    avgClosedPrice: 470000,
    activeListings: 11,
    avgDom: 31
  },
  risk: {
    expiringSoon: 2,
    staleListings: 1,
    lostListings: 3,
    engagementRate: '78% opened'
  },
  opener: 'Congrats on your March closing in 77008! I‚Äôve got a buyer actively looking in that ZIP. Want to chat?'
};
```

### 2.2 Replace Static HTML with Data Bindings
```html
<div class="row">Office: {insights.profile.office}</div>
<div class="row">Closed Deals: {insights.sales.closedDeals}</div>
```

### 2.3 Optional Formatting
```js
get formattedVolume() {
  return new Intl.NumberFormat('en-US', {
    style: 'currency', currency: 'USD'
  }).format(this.insights.sales.volume);
}
```

### 2.4 Push to Org and Preview
```bash
sfdx force:source:push
sfdx force:org:open
```

‚úÖ Reload the Lightning App Page and verify mock data renders correctly.

---

## ‚úÖ Step 3: Wire Apex Data to LWC  
‚è± Estimated Time: 2 hours

### 3.1 Confirm Apex Controller Exists
```apex
public with sharing class AgentInsightsController {
    @AuraEnabled(cacheable=true)
    public static Map<String, Object> getAgentInsights(String agentEmail, String agentZip, String agentOffice) {
        Map<String, Object> insights = new Map<String, Object>();
        return insights;
    }
}
```

### 3.2 Import Apex Method in JS
```js
import getAgentInsights from '@salesforce/apex/AgentInsightsController.getAgentInsights';
```

### 3.3 Call Apex in connectedCallback
```js
import { LightningElement, track, api } from 'lwc';
import getAgentInsights from '@salesforce/apex/AgentInsightsController.getAgentInsights';

export default class AgentInsightsCard extends LightningElement {
  @track insights;
  @api agentEmail;
  @api agentZip;
  @api agentOffice;

  connectedCallback() {
    this.loadInsights();
  }

  loadInsights() {
    getAgentInsights({
      agentEmail: this.agentEmail,
      agentZip: this.agentZip,
      agentOffice: this.agentOffice
    })
    .then((result) => {
      this.insights = result;
    })
    .catch((error) => {
      console.error('Error loading insights:', error);
    });
  }
}
```

### 3.4 Optional: Add Manual Input Fields for Testing
```html
<lightning-input label="Agent Email" value="agent@email.com"></lightning-input>
<lightning-input label="ZIP" value="77008"></lightning-input>
<lightning-input label="Office" value="Houston Heights"></lightning-input>
```

### 3.5 Push to Org and Preview
```bash
sfdx force:source:push
sfdx force:org:open
```

‚úÖ Verify the component loads data and renders correctly from Apex.

---

(Truncated here for brevity ‚Äî full markdown will include Steps 4‚Äì7)


---

## ‚úÖ Step 4: Make Stats Clickable with Modals or Redirects  
‚è± Estimated Time: 2‚Äì3 hours

### 4.1 Add Clickable Buttons Around Key Stats
```html
<lightning-button variant="base" label="Lost Listings: 3" onclick={handleLostClick}></lightning-button>

<!-- or -->
<div class="clickable-row" onclick={handleLostClick}>
  Lost Listings: {insights.risk.lostListings}
</div>
```

### 4.2 Add Modal Component (Optional)
```bash
sfdx force:lightning:component:create --type lwc --componentname agentInsightsModal
```

**agentInsightsModal.html**
```html
<template if:true={visible}>
  <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
    <div class="slds-modal__container">
      <header class="slds-modal__header">
        <h2 class="slds-text-heading_medium">{modalTitle}</h2>
      </header>
      <div class="slds-modal__content slds-p-around_medium">
        <slot></slot>
      </div>
      <footer class="slds-modal__footer">
        <lightning-button variant="neutral" label="Close" onclick={close}></lightning-button>
      </footer>
    </div>
  </section>
  <div class="slds-backdrop slds-backdrop_open"></div>
</template>
```

**agentInsightsModal.js**
```js
import { LightningElement, api, track } from 'lwc';
export default class AgentInsightsModal extends LightningElement {
  @track visible = false;
  @api modalTitle = '';

  @api open(title) {
    this.modalTitle = title;
    this.visible = true;
  }

  close() {
    this.visible = false;
  }
}
```

### 4.3 Trigger Modal from Parent Component
```js
handleLostClick() {
  this.template.querySelector('c-agent-insights-modal')?.open('Lost Listings');
}
```
```html
<c-agent-insights-modal></c-agent-insights-modal>
```

### 4.4 Alternative: Use NavigationMixin
```js
import { NavigationMixin } from 'lightning/navigation';

export default class AgentInsightsCard extends NavigationMixin(LightningElement) {
  handleRedirect() {
    this[NavigationMixin.Navigate]({
      type: 'standard__recordPage',
      attributes: {
        recordId: '005XXXXXXXXXXXXXXX',
        objectApiName: 'Agent__c',
        actionName: 'view'
      }
    });
  }
}
```

### 4.5 Push Changes and Test Interactions
```bash
sfdx force:source:push
sfdx force:org:open
```

‚úÖ Verify modal opens or redirects when stats are clicked.

---

## ‚úÖ Step 5: Calculate Engagement Rate  
‚è± Estimated Time: 2 hours

### 5.1 Create Apex Logic to Query Activity Data
```apex
@AuraEnabled(cacheable=true)
public static String calculateEngagementRate(String agentEmail) {
    List<Task> emails = [
        SELECT Id, Status FROM Task
        WHERE Type = 'Email' AND Who.Email = :agentEmail
    ];

    Integer totalSent = emails.size();
    Integer opened = 0;

    if (totalSent == 0) return '0%';
    Decimal rate = (Decimal.valueOf(opened) / totalSent) * 100;
    return String.valueOf(rate.setScale(0)) + '% opened';
}
```

> Note: You‚Äôll need open-tracking stored on a custom object (like `EmailTracking__c`) unless using a third-party email service.

### 5.2 Wire Method to LWC
```js
import calculateEngagementRate from '@salesforce/apex/AgentInsightsController.calculateEngagementRate';

connectedCallback() {
  this.loadInsights();
  this.loadEngagement();
}

loadEngagement() {
  calculateEngagementRate({ agentEmail: this.agentEmail })
    .then(result => {
      this.insights.risk.engagementRate = result;
    })
    .catch(error => {
      console.error('Engagement calc error:', error);
    });
}
```

### 5.3 Display Engagement in Card
```html
<div class="row">Engagement Rate: {insights.risk.engagementRate}</div>
```

‚úÖ This now updates dynamically from Apex.

---

## ‚úÖ Step 6: Style & Final QA  
‚è± Estimated Time: 2 hours

### 6.1 Polish Visual Layout
```css
.agent-card section {
  margin-bottom: 1rem;
}
.agent-card .row {
  justify-content: space-between;
  font-size: 14px;
}
```

### 6.2 Add Conditional Styling
```css
.warning {
  color: red;
  font-weight: bold;
}
```

### 6.3 Responsive QA
- Mobile preview with DevTools
- Button interactions
- Focus states

‚úÖ Layout ready for delivery.

---

## ‚úÖ Step 7: Testing & Deployment  
‚è± Estimated Time: 1.5‚Äì2 hours

### 7.1 Unit Test Apex Controllers
```apex
@isTest
private class AgentInsightsControllerTest {
  @isTest static void testInsights() {
    Test.startTest();
    Map<String, Object> result = AgentInsightsController.getAgentInsights('agent@email.com', '77008', 'Houston Heights');
    System.assertNotEquals(null, result);
    Test.stopTest();
  }
}
```

‚úÖ Code coverage goal: 90%+

### 7.2 Manual QA Checklist
- [ ] LWC renders without error
- [ ] Mock + Apex data loads
- [ ] Modals work
- [ ] Engagement rate updates

### 7.3 Final Deployment
```bash
sfdx force:source:deploy -p force-app/main/default/lwc/agentInsightsCard
sfdx force:source:deploy -p force-app/main/default/classes/AgentInsightsController.cls
```

‚úÖ Component is now production ready.


---

## üß† Salesforce Logic & Bridge Field Mapping

Below is how each metric is computed using Bridge MLS API fields + Salesforce logic.

---

### üìä SALES PERFORMANCE

#### YTD Volume
- **Bridge Field:** `ClosePrice`
- **Salesforce Logic:** 
  - Sum all `ClosePrice` values from Bridge where `CloseDate` is in current year

#### Closed Deals
- **Bridge Field:** `ListingId`
- **Salesforce Logic:** 
  - Count of listings with `Status = Closed` AND `CloseDate` in current year

#### Avg Deal Size
- `YTD Volume √∑ Closed Deals`

#### Last Close Date
- **Logic:** Latest `CloseDate` among closed listings

#### List-to-Close (Days)
- **Logic:** `CloseDate - ListDate`, averaged over all closed listings

---

### üß≠ MARKET CONTEXT

#### Comps Closed (90 Days)
- **Bridge Filter:** `Status = Closed` AND `CloseDate >= TODAY() - 90`

#### Avg Closed Price (90d)
- Average `ClosePrice` from above filter

#### Active Listings
- **Bridge Filter:** `Status = Active`

#### Avg DOM (Days on Market)
- **Bridge Field:** `DOM`
- **Logic:** Average of `DOM` where `Status = Closed`

---

### ‚ö†Ô∏è LISTING RISK SIGNALS

#### Expiring Soon
- **Bridge Field:** `ExpirationDate`
- **Logic:** `ExpirationDate <= TODAY() + 30`

#### Stale Listings
- **Bridge Field:** `DOM`
- **Logic:** `DOM > 60` AND `Status = Active`

#### Lost Listings
- **Bridge Filter:** `Status = Expired OR Withdrawn`

---

### üì© Email/SMS Engagement
- **Source:** Custom object `Agent_Engagement__c`
- **Logic:**  
  - `Engagement Rate = (Opened √∑ Sent) * 100`
  - Or passed from tracked field in external provider (Mailgun, Sendgrid)

---

üìå Use an Apex controller that queries Bridge data via REST API, maps to local models, and aggregates each metric using the above rules.

